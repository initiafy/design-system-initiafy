!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/material/tooltip"),require("@angular/material/button"),require("@angular/cdk/collections"),require("@angular/material"),require("@angular/material/input"),require("@angular/forms"),require("@angular/router"),require("@angular/material/snack-bar"),require("@angular/material/dialog")):"function"==typeof define&&define.amd?define("design-system-initiafy",["exports","@angular/core","@angular/common","@angular/material/tooltip","@angular/material/button","@angular/cdk/collections","@angular/material","@angular/material/input","@angular/forms","@angular/router","@angular/material/snack-bar","@angular/material/dialog"],e):e((t=t||self)["design-system-initiafy"]={},t.ng.core,t.ng.common,t.ng.material.tooltip,t.ng.material.button,t.ng.cdk.collections,t.ng.material,t.ng.material.input,t.ng.forms,t.ng.router,t.ng.material["snack-bar"],t.ng.material.dialog)}(this,function(t,e,n,o,a,i,l,s,c,r,u,d){"use strict";var m=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-header",template:'<div class="initiafy-header-wrapper">\n  <div class="initiafy-header">\n    <ng-content></ng-content>\n  </div>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t}(),p=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule],declarations:[m],exports:[m]}]}],t}(),g=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-sidenav",template:'<div id="initiafySidenav">\n  <div class="initiafy-sidenav-container">\n    <ng-content></ng-content>\n  </div>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t}(),f=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule],declarations:[g],exports:[g]}]}],t}(),h=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-content",template:'<div class="initiafy-content">\n  <ng-content></ng-content>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t}(),y=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule],declarations:[h],exports:[h]}]}],t}(),b=function(){function t(){this.cssClass="",this.content="",this.isLoading=""}return t.prototype.ngOnInit=function(){},Object.defineProperty(t.prototype,"cssClasses",{get:function(){var t=this.cssClass;return"end"===this.content&&(t+=" justify-content-end"),t},enumerable:!0,configurable:!0}),t.decorators=[{type:e.Component,args:[{selector:"initiafy-action-bar",template:'<div class="action-bar" [ngClass]="cssClasses">\n  <ng-content></ng-content>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={cssClass:[{type:e.Input}],content:[{type:e.Input}],isLoading:[{type:e.Input}]},t}(),C=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule],declarations:[b],exports:[b]}]}],t}(),M=function(){function t(){this.icon="",this.iconFont="material-icons",this.size="small",this.cssClass="",this.tooltip=""}return t.prototype.ngOnInit=function(){},Object.defineProperty(t.prototype,"iconClasses",{get:function(){var t;switch(this.iconFont){case"font-awesome-brand":t="fab fa-"+this.icon;break;case"font-awesome-solid":t="fas fa-"+this.icon;break;case"glyphicon":t="glyphicon glyphicon-"+this.icon;break;case"initiafy":t="initiafy-icons "+this.icon;break;case"material-outlined":t="material-icons-outlined "+this.icon;break;default:t="material-icons"}return t+" "+this.cssClass},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"showText",{get:function(){var t;switch(this.iconFont){case"font-awesome-brand":case"font-awesome-solid":t=!1;break;case"glyphicon":t=!0;break;case"initiafy":case"material-outlined":t=!1;break;default:t=!0}return t},enumerable:!0,configurable:!0}),t.decorators=[{type:e.Component,args:[{selector:"initiafy-icon",template:'<i [ngClass]="iconClasses" [class]="size" [matTooltip]="tooltip">\n  <ng-container *ngIf="showText">{{ icon }}</ng-container>\n</i>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={icon:[{type:e.Input}],iconFont:[{type:e.Input}],size:[{type:e.Input}],cssClass:[{type:e.Input}],tooltip:[{type:e.Input}]},t}(),k=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,o.MatTooltipModule],declarations:[M],exports:[M]}]}],t}(),w=function(){function t(){this.label="",this.icon="",this.iconFont="material-icons",this.tooltip="",this.cssClass="",this.size="big",this.disabled=!1,this.callback=new e.EventEmitter}return Object.defineProperty(t.prototype,"classes",{get:function(){return this.size+" "+this.cssClass},enumerable:!0,configurable:!0}),t.decorators=[{type:e.Component,args:[{selector:"initiafy-action-button",template:'<button \n  class="action-button ripple"\n  [ngClass]="classes"\n  [matTooltip]="tooltip"\n  [disabled]="disabled"\n  (click)="callback.emit($event)">\n  <div class="action-button-wrapper">\n    <ng-template [ngIf]="icon">\n      <initiafy-icon [icon]="icon" [iconFont]="iconFont" [size]="size"></initiafy-icon>\n    </ng-template>\n    <h3> {{ label }} </h3>\n  </div>\n</button>\n',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={label:[{type:e.Input}],icon:[{type:e.Input}],iconFont:[{type:e.Input}],tooltip:[{type:e.Input}],cssClass:[{type:e.Input}],size:[{type:e.Input}],disabled:[{type:e.Input}],callback:[{type:e.Output}]},t}(),v=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,o.MatTooltipModule,k],declarations:[w],exports:[w]}]}],t}(),I=function(){function t(){this.design="main",this.type="submit",this.iconFont="material-icons",this.cssClass="",this.tooltip="",this.disabled=!1,this.hideLabelOnMobile=!1,this.callback=new e.EventEmitter}return t.prototype.ngOnInit=function(){},Object.defineProperty(t.prototype,"classes",{get:function(){var t=this.design;return"white"!==this.design&&this.color&&(t+=" "+this.color),this.hideLabelOnMobile&&(t+=" hide-label-on-mobile"),this.cssClass&&(t+=" "+this.cssClass),t},enumerable:!0,configurable:!0}),t.decorators=[{type:e.Component,args:[{selector:"initiafy-button",template:'<button \n  mat-button\n  class="button"\n  [class.single]="!label"\n  [ngClass]="classes"\n  [type]="type"\n  [matTooltip]="tooltip"\n  [disabled]="disabled"\n  (click)="callback.emit($event)"\n  >\n  <ng-template [ngIf]="icon"><initiafy-icon [icon]="icon" [iconFont]="iconFont"></initiafy-icon></ng-template>\n  <ng-template [ngIf]="label"><span class="button-label">{{ label }}</span></ng-template>\n</button>\n',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={design:[{type:e.Input}],color:[{type:e.Input}],label:[{type:e.Input}],type:[{type:e.Input}],icon:[{type:e.Input}],iconFont:[{type:e.Input}],cssClass:[{type:e.Input}],tooltip:[{type:e.Input}],disabled:[{type:e.Input}],hideLabelOnMobile:[{type:e.Input}],callback:[{type:e.Output}]},t}(),x=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,a.MatButtonModule,o.MatTooltipModule,k],declarations:[I],exports:[I]}]}],t}(),S=function(){function t(){this.cssClass=""}return t.decorators=[{type:e.Component,args:[{selector:"initiafy-card",template:'<div class="initiafy-card" [ngClass]="cssClass">\n  <ng-content></ng-content>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={cssClass:[{type:e.Input}]},t}(),D=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule],declarations:[S],exports:[S]}]}],t}(),F={count:"count",nested:"nested",transformer:"transformer",menu:"menu",checkbox:"extra-checkbox",input:"input",list:"list"},T=function(){function t(){this.selectionModelChange=new e.EventEmitter}return Object.defineProperty(t.prototype,"selectionModel",{get:function(){return this._selectionModelValue},set:function(t){this._selectionModelValue=t,this.selectionModelChange.emit(this._selectionModelValue)},enumerable:!0,configurable:!0}),t.prototype.ngAfterViewInit=function(){var t=this;this.dataTableSettings.dataSource.paginator=this.paginator,this.dataTableSettings.dataSource.sort=this.sort,this._itemsShown=this.dataTableSettings.dataSource.data.slice(0,this.paginator.pageSize),this.dataTableSettings.dataSource.paginator.page.subscribe(function(e){var n=e.pageIndex*e.pageSize,o=n+e.pageSize;t._itemsShown=t.dataTableSettings.dataSource.filteredData.slice(n,o)})},t.prototype.ngOnInit=function(){this.dataTableSettings.displayedColumns.some(function(t){return"checkbox"===t})&&!this.selectionModel&&(console.warn('      It is recommended to provide a selection model in checkbox mode\n      for example: `this.selectionModel = new SelectionModel(true);`\n      `[(selectionModel)]="selectionModel"`'),this.selectionModel=new i.SelectionModel(!0)),this.dataTableSettings.displayedColumns.some(function(t){return"menu"===t})&&!this.dataTableSettings.menu&&console.warn("You must provide a menu item array for the menu column"),this.dataTableSettings.columnDefinitions.some(function(t){return(t.mode===F.checkbox||t.mode===F.input)&&!t.disableFormField})&&console.warn("Using form field elements, you should supply a disabling method, e.g. `disableFormField: (row) => false`"),this.dataTableSettings.columnDefinitions.some(function(t){return t.mode===F.checkbox&&!t.checkboxSettings})&&console.warn("supply checkbox settings with checkbox column"),this.dataTableSettings.columnDefinitions.some(function(t){return t.mode===F.input&&!t.inputSettings})&&console.warn("supply input settings with input column")},t.prototype.checkboxChange=function(t,e){t.source;t.checked?this.selectionModel.select(e):this.selectionModel.deselect(e)},Object.defineProperty(t.prototype,"isAllSelected",{get:function(){return this.selectionModel.selected.length===Math.min(this.dataTableSettings.dataSource.data.length,this.paginator.pageSize)},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"areSomeSelected",{get:function(){return this.selectionModel.selected.length>0&&!this.isAllSelected},enumerable:!0,configurable:!0}),t.prototype.isItemSelected=function(t){return this.selectionModel.isSelected(t)},t.prototype.masterCheckboxChange=function(t){var e=this;t.source,t.checked;this.isAllSelected?this.selectionModel.clear():this._itemsShown.forEach(function(t){e.selectionModel.isSelected(t)||e.selectionModel.select(t)})},t.prototype.trackByColumnName=function(t,e){return t.columnName},Object.defineProperty(t.prototype,"smallcreen",{get:function(){return window.innerWidth<961},enumerable:!0,configurable:!0}),t.prototype.handleRowClick=function(t,e){var n=t.target.classList;n.contains("mat-checkbox-inner-container")||n.contains("row-action-button")||n.contains("mat-button-wrapper")||this.dataTableSettings.clickableRows&&(this.dataTableSettings.handleRowClick?this.dataTableSettings.handleRowClick(e):this.selectionModel.toggle(e))},t.prototype.handleCellClick=function(t,e){t.handleCellClick&&t.mode!==F.checkbox&&t.handleCellClick(e)},t.prototype.getNestedValue=function(t,e){var n;return t.columnName.split(".").forEach(function(t){n=(n||e)[t]}),n},t.prototype.isRowSelected=function(t){return!!this.selectionModel&&this.selectionModel.isSelected(t)},t.decorators=[{type:e.Component,args:[{selector:"initiafy-data-table",template:'<mat-table [dataSource]="dataTableSettings.dataSource">\n  <ng-container matColumnDef="checkbox">\n    <mat-header-cell *matHeaderCellDef mat-sort-header [ngClass]="\'customCheckboxColumnClass\'">\n      <mat-checkbox [checked]="isAllSelected" [indeterminate]="areSomeSelected" (change)="masterCheckboxChange($event)">\n      </mat-checkbox>\n    </mat-header-cell>\n    <mat-cell *matCellDef="let row" [ngClass]="\'customCheckboxColumnClass\'">\n      <mat-checkbox [checked]="isItemSelected(row)" class="the_checkboxes" (change)="checkboxChange($event, row)">\n      </mat-checkbox>\n      <initiafy-button class="show_in_small_screen align-right-small-screen" *ngIf="dataTableSettings.menu"\n        [matMenuTriggerFor]="appMenu" (click)="clickedItem = row" icon="more_vert" [disabled]="!dataTableSettings.menu">\n      </initiafy-button>\n    </mat-cell>\n  </ng-container>\n  <ng-container matColumnDef="menu">\n    <mat-header-cell *matHeaderCellDef mat-sort-header [ngClass]="\'customMenuColumnClass flex justify-content-center\'">\n    </mat-header-cell>\n    <mat-cell class="hide_in_small_screen" *matCellDef="let row"\n      [ngClass]="\'customMenuColumnClass flex justify-content-center\'">\n      <initiafy-button [matMenuTriggerFor]="appMenu" (click)="clickedItem = row" [cssClass]="\'row-action-button\'"\n        icon="more_vert" [disabled]="!dataTableSettings.menu">\n      </initiafy-button>\n    </mat-cell>\n  </ng-container>\n  <ng-container *ngFor="let column of dataTableSettings.columnDefinitions; trackBy: trackByColumnName"\n    [matColumnDef]="column.columnName">\n    <mat-header-cell *matHeaderCellDef mat-sort-header\n      [class.customExtraCheckboxColumnClass]="column.mode === \'extra-checkbox\'"\n      [ngClass]="smallcreen ? column.customHeaderClassSm : column.customHeaderClassLg">\n      {{ column.title }}\n    </mat-header-cell>\n    <ng-container [ngSwitch]="column.mode">\n      <ng-container *ngSwitchCase="\'nested\'">\n        <mat-cell *matCellDef="let row" class="block_small_screen" [attr.data-label]="column.title"\n          [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg"\n          (click)="handleCellClick(column, row)" [class.pointer]="column.handleCellClick">\n          {{ getNestedValue(column, row) }}\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'count\'">\n        <mat-cell *matCellDef="let row" class="block_small_screen" [attr.data-label]="column.title"\n          [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg"\n          (click)="handleCellClick(column, row)" [class.pointer]="column.handleCellClick">\n          {{ row.cnt }}\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'transformer\'">\n        <mat-cell *matCellDef="let row" class="block_small_screen" [attr.data-label]="column.title"\n          [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg"\n          (click)="handleCellClick(column, row)" [class.pointer]="column.handleCellClick">\n          {{ column.transformer(row) }}\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'extra-checkbox\'">\n        <mat-cell *matCellDef="let row" class="block_small_screen customExtraCheckboxColumnClass"\n          [attr.data-label]="column.title" [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg"\n          (click)="handleCellClick(column, row)" [class.pointer]="column.handleCellClick">\n          <mat-checkbox [disabled]="column.disableFormField(row)"\n            [checked]="column.checkboxSettings.checkboxChecked(row)"\n            (change)="column.checkboxSettings.checkboxChange($event, row)" class="margin-x-auto"></mat-checkbox>\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'list\'">\n        <mat-cell *matCellDef="let row" class="block_small_screen"\n          [attr.data-label]="column.title" [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg"\n          [class.pointer]="column.handleCellClick">\n          <ul>\n            <li *ngFor="let item of column.listAccessor(row)">{{item}}</li>\n          </ul>\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngSwitchCase="\'input\'">\n        <mat-cell *matCellDef="let row" [attr.data-label]="column.title" class="block_small_screen input-cell"\n          [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg"\n          (click)="handleCellClick(column, row)" [class.pointer]="column.handleCellClick">\n          <mat-form-field class="column-input-form-field" floatLabel="always">\n            <input [disabled]="column.disableFormField(row)" [placeholder]="smallcreen ? column.title : \'\'" matInput\n              (keyup)="column.inputSettings.inputChange($event, row)" [value]="column.inputSettings.inputValue(row)" />\n          </mat-form-field>\n        </mat-cell>\n      </ng-container>\n      <ng-container *ngSwitchDefault>\n        <mat-cell *matCellDef="let row" class="block_small_screen"\n          [ngClass]="smallcreen ? column.customCellClassSm : column.customCellClassLg" [attr.data-label]="column.title"\n          (click)="handleCellClick(column, row)" [class.pointer]="column.handleCellClick">\n          {{ row[column.columnName] }}\n        </mat-cell>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n  <mat-header-row *matHeaderRowDef="dataTableSettings.displayedColumns"></mat-header-row>\n  <mat-row *matRowDef="let row; columns: dataTableSettings.displayedColumns"\n    [class.hover-bgcolor]="!dataTableSettings.hideSelectedRowHighlighting && isRowSelected(row)"\n    [class.pointer]="!!dataTableSettings.clickableRows" (click)="handleRowClick($event, row)"></mat-row>\n</mat-table>\n\n<mat-paginator [pageSizeOptions]="[5, 10, 25, 100]"></mat-paginator>\n\n<mat-menu #appMenu="matMenu">\n  <div *ngIf="dataTableSettings.menu">\n    <ng-container *ngFor="let item of dataTableSettings.menu">\n      <button mat-menu-item (click)="item.action(clickedItem)" [disabled]="item.disabled && item.disabled(clickedItem)">\n        <mat-icon>{{ item.icon }}</mat-icon>\n        {{ item.label }}\n      </button>\n    </ng-container>\n  </div>\n</mat-menu>',styles:[".customCheckboxColumnClass{flex:0 1 58px}.customExtraCheckboxColumnClass,.customMenuColumnClass{flex:0 1 80px;justify-content:center}.show_in_small_screen{display:none}.column-input-form-field{width:100%}@media screen and (max-width:960px){.block_small_screen{display:block}.the_checkboxes{margin-bottom:8px;margin-left:8px}.mat-table{border:0;vertical-align:middle}.align-right-small-screen{margin-left:auto}.mat-table caption{font-size:1em}mat-cell:first-of-type,mat-footer-cell:first-of-type,mat-header-cell:first-of-type{padding-left:0}mat-cell:last-of-type,mat-footer-cell:last-of-type,mat-header-cell:last-of-type{padding-right:0}mat-footer-row::after,mat-header-row::after,mat-row::after{min-height:auto}.mat-table .mat-header-cell{border:10px solid;clip:rect(0 0 0 0);height:1px;margin:-1px;padding:0;position:absolute;width:1px}.mat-header-row{display:none}.mat-table .mat-row{border-bottom:5px solid #ddd;display:block}.mat-table .mat-cell{border-bottom:1px solid #ddd;font-size:1em;text-align:right;height:30px;margin-bottom:4%;padding-left:8px;padding-right:8px}.mat-table .mat-cell:not(.input-cell):before{content:attr(data-label);float:left;color:rgba(0,0,0,.54);font-weight:400;font-size:12px}.mat-table .mat-cell:last-child{border-bottom:0}.mat-table .mat-cell:first-child{margin-top:4%}.hide_in_small_screen{display:none}.show_in_small_screen{display:block}}ul{list-style:none;padding-left:0}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={dataTableSettings:[{type:e.Input}],selectionModel:[{type:e.Input}],selectionModelChange:[{type:e.Output}],paginator:[{type:e.ViewChild,args:[l.MatPaginator]}],sort:[{type:e.ViewChild,args:[l.MatSort]}],checkboxes:[{type:e.ViewChildren,args:[l.MatCheckbox]}]},t}(),_=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{declarations:[T],imports:[n.CommonModule,x,l.MatIconModule,l.MatCheckboxModule,l.MatMenuModule,l.MatFormFieldModule,l.MatPaginatorModule,l.MatTableModule,l.MatInputModule],exports:[T]}]}],t}(),B=function(){function t(){this.isLoading=""}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-progress-bar",template:'<div class="progress-bar" *ngIf="isLoading">\n    <div class="indeterminate"></div>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={isLoading:[{type:e.Input}]},t}(),O=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule],declarations:[B],exports:[B]}]}],t}(),P=function(){function t(){this.cssClass="",this.size="std",this.isLoading=!1}return t.prototype.ngOnInit=function(){},Object.defineProperty(t.prototype,"classes",{get:function(){return this.cssClass+" "+this.size},enumerable:!0,configurable:!0}),t.decorators=[{type:e.Component,args:[{selector:"initiafy-loading-card",template:'<div class="loading-card" [ngClass]="classes">\n  <div class="loading-card-content">\n    <ng-content></ng-content>\n  </div>\n  <initiafy-progress-bar [isLoading]="isLoading" class="loading-card-bar"></initiafy-progress-bar>\n</div>',styles:[":host{width:100%;display:flex;align-items:center;justify-content:center}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={cssClass:[{type:e.Input}],size:[{type:e.Input}],isLoading:[{type:e.Input}]},t}(),j=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,D,O],declarations:[P],exports:[P]}]}],t}(),L=function(){function t(){this.overlay=!1,this.hideCloseButton=!1,this.close=new e.EventEmitter}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-modal",template:'<div class="initiafy-modal" [class.is-overlay]="overlay">\n  <div class="initiafy-modal-root">\n    <div class="initiafy-modal-close" (click)="close.emit()" *ngIf="!hideCloseButton">\n      <initiafy-icon icon="close"></initiafy-icon>\n    </div>\n    <div class="initiafy-modal-content">\n      <div class="flex justify-content-center column full-height">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  </div>\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={overlay:[{type:e.Input}],hideCloseButton:[{type:e.Input}],close:[{type:e.Output}]},t}(),N=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,k],declarations:[L],exports:[L]}]}],t}(),A=function(){function t(){this.icon="",this.iconFont="",this.message="",this.hasData=!1}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-result",template:'<ng-template [ngIf]="hasData" [ngIfElse]="emptyContainer">\n  <ng-content></ng-content>\n</ng-template>\n<ng-template #emptyContainer>\n  <div class="full-width flex-justify-align-center column default height-500">\n    <initiafy-icon cssClass="feedback-color" icon="{{ icon }}" iconFont="{{ iconFont }}" size="big"></initiafy-icon>\n    <p class="text24 feedback-color text-center margin-y-std">{{ message }}</p>\n  </div>\n</ng-template>\n',styles:[""]}]}],t.ctorParameters=function(){return[]},t.propDecorators={icon:[{type:e.Input}],iconFont:[{type:e.Input}],message:[{type:e.Input}],hasData:[{type:e.Input}]},t}(),E=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,k],declarations:[A],exports:[A]}]}],t}(),z=function(){function t(){this.placeholder="Enter search term",this.color="primary",this.value="Search term",this.buttontext="Search",this.buttonicon="search",this.search=new e.EventEmitter,this.collapsedValue=!1,this.collapsedChange=new e.EventEmitter}return Object.defineProperty(t.prototype,"collapsed",{get:function(){return this.collapsedValue},set:function(t){this.collapsedValue=t,this.collapsedChange.emit(this.collapsedValue)},enumerable:!0,configurable:!0}),t.prototype.ngOnInit=function(){},t.prototype.onSubmit=function(){this.search.emit(this.value)},t.prototype.unCollapse=function(){this.collapsed=!1},t.decorators=[{type:e.Component,args:[{selector:"initiafy-search-bar",template:'<form (ngSubmit)="onSubmit()">\n  <div class="flex align-items-flex-end">\n    <ng-template\n      #notCollapsedTemplate\n      [ngIf]="!collapsed"\n      [ngIfElse]="collapsedTemplate"\n    >\n      <mat-form-field\n        [color]="color"\n        floatLabel="always"\n        class="example-form-field"\n      >\n        <input\n          matInput\n          type="text"\n          [placeholder]="placeholder"\n          [(ngModel)]="value"\n          name="value"\n        />\n        <button\n          mat-button\n          *ngIf="value"\n          type="button"\n          matSuffix\n          mat-icon-button\n          aria-label="Clear"\n          (click)="value = \'\'"\n        >\n          <mat-icon>close</mat-icon>\n        </button>\n      </mat-form-field>\n      <initiafy-button\n        class="margin-bottom-20 flex align-items-end"\n        [label]="buttontext"\n        [color]="color"\n        type="submit"\n        aria-label="Search"\n      >\n      </initiafy-button>\n    </ng-template>\n    <ng-template #collapsedTemplate>\n      <initiafy-button\n        class="margin-bottom-20 flex align-items-end"\n        type="button"\n        (callback)="unCollapse()"\n        [icon]="buttonicon"\n        [color]="color"\n        aria-label="Search"\n      >\n      </initiafy-button>\n    </ng-template>\n  </div>\n</form>\n',styles:[":host{display:block}"]}]}],t.ctorParameters=function(){return[]},t.propDecorators={placeholder:[{type:e.Input}],color:[{type:e.Input}],value:[{type:e.Input}],buttontext:[{type:e.Input}],buttonicon:[{type:e.Input}],search:[{type:e.Output}],collapsed:[{type:e.Input}],collapsedChange:[{type:e.Output}]},t}(),R=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,c.FormsModule,c.ReactiveFormsModule,l.MatFormFieldModule,s.MatInputModule,l.MatButtonModule,l.MatIconModule,x,k],declarations:[z],exports:[z]}]}],t}(),V=function(){function t(t,e){this.data=t,this.snackBar=e}return t.prototype.ngOnInit=function(){},t.prototype.dismiss=function(){this.snackBar.dismiss()},t.prototype.action=function(){this.snackBar.dismiss(),this.data.actionButtonFunction&&this.data.actionButtonFunction()},t.decorators=[{type:e.Component,args:[{selector:"initiafy-snack-bar",template:'<div class="full-width flex row align-items-center justify-content-space-between white-color mat-simple-snackbar">\n  <div class="flex align-items-center default">\n    <initiafy-icon *ngIf="data.icon" class="margin-right-8" [icon]="data.icon"\n      [iconFont]="data.iconFont ?  data.iconFont : \'material-outlined\'"></initiafy-icon>\n    {{ data.message }}\n  </div>\n  <initiafy-button design="basic" [cssClass]="\'white-color\'" *ngIf="data.actionButtonLabel" [label]="data.actionButtonLabel" [tooltip]="data.actionButtonLabel"\n    [disabled]="false"></initiafy-button>\n  <initiafy-icon *ngIf="data.closeButton" class="margin-left-16 noselect pointer" (click)="dismiss()"\n    [icon]="\'close\'" [iconFont]="data.iconFont ?  data.iconFont : \'material-outlined\'"></initiafy-icon>\n  \x3c!-- <mat-icon class="margin-left-16 noselect pointer" *ngIf="data.closeButton" (click)="dismiss()">close</mat-icon> --\x3e\n</div>',styles:[""]}]}],t.ctorParameters=function(){return[{type:undefined,decorators:[{type:e.Inject,args:[l.MAT_SNACK_BAR_DATA]}]},{type:l.MatSnackBar}]},t}(),q=function(){function t(t,e){var n=this;this.router=t,this.snackBar=e,this.isAPersistentMessage=!1,this.router.events.subscribe(function(t){t instanceof r.NavigationStart&&n.snackBar.dismiss()})}return t.prototype.help=function(t,e,n){this.isAPersistentMessage=!1,this.snackBar.openFromComponent(V,{data:{icon:"",message:t,closeButton:!0,actionButtonLabel:e,actionButtonFunction:n},duration:6e5})},t.prototype.success=function(t){this.isAPersistentMessage=!1,this.snackBar.openFromComponent(V,{data:{icon:"done",message:t,closeButton:!1},duration:6e3})},t.prototype.handleServerErrors=function(t){var e="";t.forEach(function(t){return e=t.message+"\n"}),this.error(e)},t.prototype.error=function(t){this.isAPersistentMessage=!0,this.snackBar.openFromComponent(V,{data:{icon:"warning",message:t,closeButton:!0},duration:6e5})},t.prototype.dismissPersistentMessages=function(){this.isAPersistentMessage&&this.snackBar.dismiss()},t.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:r.Router},{type:l.MatSnackBar}]},t.ngInjectableDef=e.defineInjectable({factory:function(){return new t(e.inject(r.Router),e.inject(u.MatSnackBar))},token:t,providedIn:"root"}),t}(),H=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{declarations:[V],imports:[n.CommonModule,l.MatSnackBarModule,k,x],providers:[q],entryComponents:[V]}]}],t}(),$=function(){function t(){}return t.prototype.ngOnInit=function(){},t.decorators=[{type:e.Component,args:[{selector:"initiafy-spinner",template:"<mat-spinner></mat-spinner>",styles:[""]}]}],t.ctorParameters=function(){return[]},t}(),Y=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[l.MatProgressSpinnerModule],declarations:[$],exports:[$]}]}],t}(),G=function(){function t(t,e){this.dialogRef=t,this.data=e}return t.prototype.ngOnInit=function(){},t.prototype.closeDialog=function(){this.dialogRef.close()},t.decorators=[{type:e.Component,args:[{selector:"initiafy-yes-or-no",template:'<div>\n  <div class="flex row justify-content-end">\n    <div class="pointer" (click)="closeDialog()">\n      <initiafy-icon icon="close"></initiafy-icon>\n    </div>\n  </div>\n  <div class="flex justify-content-center">\n    <h1 mat-dialog-title *ngIf="data.title">{{ data.title }}</h1>\n  </div>\n\n  <div mat-dialog-content align="center">\n    <div class="full-width margin-top-std">\n      <div>\n        <initiafy-icon icon="warning"></initiafy-icon>\n        \x3c!-- <mat-icon class="text32">warning</mat-icon> --\x3e\n      </div>\n    </div>\n\n    <div class="full-width">\n      <div [innerHTML]="data.message">\n      </div>\n    </div>\n  </div>\n  <div class="full-width flex row justify-content-space-between margin-top-std">\n    <button mat-stroked-button color="primary" type="button" [mat-dialog-close]="false" *ngIf="data.noButtonLabel">\n      {{ data.noButtonLabel }}\n    </button>\n    <button mat-flat-button color="primary" type="button" [mat-dialog-close]="true" cdkFocusInitial>\n      {{ data.yesButtonLabel }}\n    </button>\n  </div>\n</div>',styles:[".close-icon{top:16px;right:16px;z-index:999;padding:10px}"]}]}],t.ctorParameters=function(){return[{type:l.MatDialogRef},{type:undefined,decorators:[{type:e.Inject,args:[l.MAT_DIALOG_DATA]}]}]},t}(),K=function(){function t(t){this.dialog=t}return t.prototype.show=function(t){var e=this.dialog;if(!(e.openDialogs.length>0)){var n="350px";return t&&t.width&&(n=t.width),e.open(G,{width:n,data:t})}},t.decorators=[{type:e.Injectable,args:[{providedIn:"root"}]}],t.ctorParameters=function(){return[{type:l.MatDialog}]},t.ngInjectableDef=e.defineInjectable({factory:function(){return new t(e.inject(d.MatDialog))},token:t,providedIn:"root"}),t}(),U=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{declarations:[G],imports:[n.CommonModule,k,l.MatButtonModule,l.MatDialogModule],exports:[G],providers:[K],entryComponents:[G]}]}],t}(),W=function(){function t(){}return t.decorators=[{type:e.NgModule,args:[{imports:[n.CommonModule,p,f,y,C,v,x,D,_,k,j,N,O,E,R,H,Y,U],exports:[p,f,y,C,v,x,D,_,k,j,N,O,R,E,R,H,Y,U],declarations:[]}]}],t}();t.DataColumnMode=F,t.DesignSystemInitiafyModule=W,t.InitiafyActionBarModule=C,t.InitiafyActionButtonModule=v,t.InitiafyButtonModule=x,t.InitiafyCardModule=D,t.InitiafyContentModule=y,t.InitiafyDataTableComponent=T,t.InitiafyDataTableModule=_,t.InitiafyHeaderModule=p,t.InitiafyIconModule=k,t.InitiafyLoadingCardModule=j,t.InitiafyModalModule=N,t.InitiafyProgressBarModule=O,t.InitiafyResultModule=E,t.InitiafySearchBarModule=R,t.InitiafySidenavModule=f,t.InitiafySnackBarModule=H,t.InitiafySpinnerModule=Y,t.InitiafyYesOrNoModule=U,t.SnackBarComponent=V,t.SnackBarService=q,t.YesOrNoDialogComponent=G,t.YesOrNoService=K,t.ɵa=m,t.ɵb=g,t.ɵc=h,t.ɵd=b,t.ɵe=M,t.ɵf=w,t.ɵg=I,t.ɵh=S,t.ɵi=_,t.ɵj=T,t.ɵk=B,t.ɵl=P,t.ɵm=L,t.ɵn=A,t.ɵo=z,t.ɵp=H,t.ɵq=V,t.ɵs=q,t.ɵt=$,t.ɵu=U,t.ɵv=G,t.ɵx=K,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=design-system-initiafy.umd.min.js.map