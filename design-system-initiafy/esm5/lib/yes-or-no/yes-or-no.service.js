/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material';
import { YesOrNoDialogComponent } from './yes-or-no/yes-or-no.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
var YesOrNoService = /** @class */ (function () {
    function YesOrNoService(dialog) {
        this.dialog = dialog;
    }
    /** Example usage
     * returns MatDialogRef generated by MatDialog.open();
     * therefore same api applies:
     * DialogService.show(data: YesOrNoDialogData).afterClosed() returns an Observable of type boolean indeicating yes or no
     */
    /**
     * Example usage
     * returns MatDialogRef generated by MatDialog.open();
     * therefore same api applies:
     * DialogService.show(data: YesOrNoDialogData).afterClosed() returns an Observable of type boolean indeicating yes or no
     * @param {?} data
     * @return {?}
     */
    YesOrNoService.prototype.show = /**
     * Example usage
     * returns MatDialogRef generated by MatDialog.open();
     * therefore same api applies:
     * DialogService.show(data: YesOrNoDialogData).afterClosed() returns an Observable of type boolean indeicating yes or no
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var dialogRef = this.dialog;
        if (dialogRef.openDialogs.length > 0) {
            return;
        }
        /** @type {?} */
        var widthConfig = '350px';
        if (data && data.width) {
            widthConfig = data.width;
        }
        return dialogRef.open(YesOrNoDialogComponent, {
            width: widthConfig,
            data: data
        });
    };
    YesOrNoService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    YesOrNoService.ctorParameters = function () { return [
        { type: MatDialog }
    ]; };
    /** @nocollapse */ YesOrNoService.ngInjectableDef = i0.defineInjectable({ factory: function YesOrNoService_Factory() { return new YesOrNoService(i0.inject(i1.MatDialog)); }, token: YesOrNoService, providedIn: "root" });
    return YesOrNoService;
}());
export { YesOrNoService };
if (false) {
    /** @type {?} */
    YesOrNoService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVzLW9yLW5vLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXNpZ24tc3lzdGVtLWluaXRpYWZ5LyIsInNvdXJjZXMiOlsibGliL3llcy1vci1uby95ZXMtb3Itbm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLG1CQUFtQixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7QUFHekU7SUFLRSx3QkFBbUIsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUFJLENBQUM7SUFFekM7Ozs7T0FJRzs7Ozs7Ozs7O0lBQ0ksNkJBQUk7Ozs7Ozs7O0lBQVgsVUFDRSxJQUF1Qjs7WUFFakIsU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFNO1FBQzdCLElBQUksU0FBUyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLE9BQU87U0FDUjs7WUFFRyxXQUFXLEdBQUcsT0FBTztRQUN6QixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3RCLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLHNCQUFzQixFQUFFO1lBQzVDLEtBQUssRUFBRSxXQUFXO1lBQ2xCLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBNUJGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBTlEsU0FBUzs7O3lCQURsQjtDQWtDQyxBQTdCRCxJQTZCQztTQTFCWSxjQUFjOzs7SUFFYixnQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXREaWFsb2csIE1hdERpYWxvZ1JlZiB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IFllc09yTm9EaWFsb2dDb21wb25lbnQgfSBmcm9tICcuL3llcy1vci1uby95ZXMtb3Itbm8uY29tcG9uZW50JztcbmltcG9ydCB7IFllc09yTm9EaWFsb2dEYXRhIH0gZnJvbSAnLi9tb2RlbHMvZGlhbG9nRGF0YSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFllc09yTm9TZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZGlhbG9nOiBNYXREaWFsb2cpIHsgfVxuXG4gIC8qKiBFeGFtcGxlIHVzYWdlXG4gICAqIHJldHVybnMgTWF0RGlhbG9nUmVmIGdlbmVyYXRlZCBieSBNYXREaWFsb2cub3BlbigpO1xuICAgKiB0aGVyZWZvcmUgc2FtZSBhcGkgYXBwbGllczpcbiAgICogRGlhbG9nU2VydmljZS5zaG93KGRhdGE6IFllc09yTm9EaWFsb2dEYXRhKS5hZnRlckNsb3NlZCgpIHJldHVybnMgYW4gT2JzZXJ2YWJsZSBvZiB0eXBlIGJvb2xlYW4gaW5kZWljYXRpbmcgeWVzIG9yIG5vXG4gICAqL1xuICBwdWJsaWMgc2hvdyhcbiAgICBkYXRhOiBZZXNPck5vRGlhbG9nRGF0YVxuICApOiBNYXREaWFsb2dSZWY8WWVzT3JOb0RpYWxvZ0NvbXBvbmVudCwgYm9vbGVhbj4ge1xuICAgIGNvbnN0IGRpYWxvZ1JlZiA9IHRoaXMuZGlhbG9nO1xuICAgIGlmIChkaWFsb2dSZWYub3BlbkRpYWxvZ3MubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCB3aWR0aENvbmZpZyA9ICczNTBweCc7XG4gICAgaWYgKGRhdGEgJiYgZGF0YS53aWR0aCkge1xuICAgICAgd2lkdGhDb25maWcgPSBkYXRhLndpZHRoO1xuICAgIH1cbiAgICByZXR1cm4gZGlhbG9nUmVmLm9wZW4oWWVzT3JOb0RpYWxvZ0NvbXBvbmVudCwge1xuICAgICAgd2lkdGg6IHdpZHRoQ29uZmlnLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9XG59XG4iXX0=