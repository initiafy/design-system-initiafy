/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { MatDialog } from '@angular/material';
import { YesOrNoDialogComponent } from './yes-or-no/yes-or-no.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/dialog";
export class YesOrNoService {
    /**
     * @param {?} dialog
     */
    constructor(dialog) {
        this.dialog = dialog;
    }
    /**
     * Example usage
     * returns MatDialogRef generated by MatDialog.open();
     * therefore same api applies:
     * DialogService.show(data: YesOrNoDialogData).afterClosed() returns an Observable of type boolean indeicating yes or no
     * @param {?} data
     * @return {?}
     */
    show(data) {
        /** @type {?} */
        const dialogRef = this.dialog;
        if (dialogRef.openDialogs.length > 0) {
            return;
        }
        /** @type {?} */
        let widthConfig = '350px';
        if (data && data.width) {
            widthConfig = data.width;
        }
        return dialogRef.open(YesOrNoDialogComponent, {
            width: widthConfig,
            data: data
        });
    }
}
YesOrNoService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
YesOrNoService.ctorParameters = () => [
    { type: MatDialog }
];
/** @nocollapse */ YesOrNoService.ngInjectableDef = i0.defineInjectable({ factory: function YesOrNoService_Factory() { return new YesOrNoService(i0.inject(i1.MatDialog)); }, token: YesOrNoService, providedIn: "root" });
if (false) {
    /** @type {?} */
    YesOrNoService.prototype.dialog;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieWVzLW9yLW5vLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9kZXNpZ24tc3lzdGVtLWluaXRpYWZ5LyIsInNvdXJjZXMiOlsibGliL3llcy1vci1uby95ZXMtb3Itbm8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLG1CQUFtQixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7QUFNekUsTUFBTSxPQUFPLGNBQWM7Ozs7SUFFekIsWUFBbUIsTUFBaUI7UUFBakIsV0FBTSxHQUFOLE1BQU0sQ0FBVztJQUFJLENBQUM7Ozs7Ozs7OztJQU9sQyxJQUFJLENBQ1QsSUFBdUI7O2NBRWpCLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTTtRQUM3QixJQUFJLFNBQVMsQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwQyxPQUFPO1NBQ1I7O1lBRUcsV0FBVyxHQUFHLE9BQU87UUFDekIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUN0QixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztTQUMxQjtRQUNELE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUM1QyxLQUFLLEVBQUUsV0FBVztZQUNsQixJQUFJLEVBQUUsSUFBSTtTQUNYLENBQUMsQ0FBQztJQUNMLENBQUM7OztZQTVCRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFOUSxTQUFTOzs7OztJQVNKLGdDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hdERpYWxvZywgTWF0RGlhbG9nUmVmIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuaW1wb3J0IHsgWWVzT3JOb0RpYWxvZ0NvbXBvbmVudCB9IGZyb20gJy4veWVzLW9yLW5vL3llcy1vci1uby5jb21wb25lbnQnO1xuaW1wb3J0IHsgWWVzT3JOb0RpYWxvZ0RhdGEgfSBmcm9tICcuL21vZGVscy9kaWFsb2dEYXRhJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgWWVzT3JOb1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBkaWFsb2c6IE1hdERpYWxvZykgeyB9XG5cbiAgLyoqIEV4YW1wbGUgdXNhZ2VcbiAgICogcmV0dXJucyBNYXREaWFsb2dSZWYgZ2VuZXJhdGVkIGJ5IE1hdERpYWxvZy5vcGVuKCk7XG4gICAqIHRoZXJlZm9yZSBzYW1lIGFwaSBhcHBsaWVzOlxuICAgKiBEaWFsb2dTZXJ2aWNlLnNob3coZGF0YTogWWVzT3JOb0RpYWxvZ0RhdGEpLmFmdGVyQ2xvc2VkKCkgcmV0dXJucyBhbiBPYnNlcnZhYmxlIG9mIHR5cGUgYm9vbGVhbiBpbmRlaWNhdGluZyB5ZXMgb3Igbm9cbiAgICovXG4gIHB1YmxpYyBzaG93KFxuICAgIGRhdGE6IFllc09yTm9EaWFsb2dEYXRhXG4gICk6IE1hdERpYWxvZ1JlZjxZZXNPck5vRGlhbG9nQ29tcG9uZW50LCBib29sZWFuPiB7XG4gICAgY29uc3QgZGlhbG9nUmVmID0gdGhpcy5kaWFsb2c7XG4gICAgaWYgKGRpYWxvZ1JlZi5vcGVuRGlhbG9ncy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHdpZHRoQ29uZmlnID0gJzM1MHB4JztcbiAgICBpZiAoZGF0YSAmJiBkYXRhLndpZHRoKSB7XG4gICAgICB3aWR0aENvbmZpZyA9IGRhdGEud2lkdGg7XG4gICAgfVxuICAgIHJldHVybiBkaWFsb2dSZWYub3BlbihZZXNPck5vRGlhbG9nQ29tcG9uZW50LCB7XG4gICAgICB3aWR0aDogd2lkdGhDb25maWcsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==